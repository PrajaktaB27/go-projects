package main

import (
	// "fmt"
	"math/big"
)

// Problem 1
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
// The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

// func sumOfMultiples(n int) int {
// 	sum := 0
// 	for i := range n {
// 		if i%3 == 0 || i%5 == 0 {
// 			sum += i
// 		}
// 	}
// 	return sum
// }

// Problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// func evenFibonacci() int {
// 	//how to get a cap of 4 million for the same
// 	//the numbers that are being added shouldnt exceed 4 mil - 4,000,000
// 	sum := 2
// 	fib := []int{1, 2} //first 2 numbers of the series as mentioned in the problem

// 	for {
// 		next := fib[len(fib)-1] + fib[len(fib)-2] //add the last 2 numbers of the slice

// 		if next > 4000000 {
// 			break
// 		}

// 		fib = append(fib, next) // 1 + 2 = 3 , 2 + 3 = 5 and so on

// 		if next%2 == 0 {
// 			sum += next //the slice and sum are unrelated and both need to be calculated
// 			fmt.Println("sum", sum)
// 		}
// 	}
// 	return sum
// }

// Problem 25
// 1000--digit Fibonacci Number
// The 12th term, f12, is the first term to contain three digits, What is the index of the first term in the Fibonacci sequence to contain 1000 digits

func thousandthDigitFibonacci() int {
	fib := []*big.Int{big.NewInt(1), big.NewInt(1)} //1st 2 fibonacci numbers in slice
	index := 2                                      //index to track starts at 2 bec we already have 2 numbers

	for {
		sum := new(big.Int).Add(fib[0], fib[1]) //sum = f0 + f1
		index++

		if len(sum.String()) >= 1000 { //check for length
			return index
		}

		fib[0].Set(fib[1]) //move f2 to f1
		fib[1].Set(sum)    //move sum to f2
	}
}
